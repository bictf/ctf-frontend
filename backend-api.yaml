openapi: 3.0.3
info:
  title: backend API
  description: backend API
  version: 1.0.0
servers:
  - url: /api
paths:
  /login:
    get:
      tags:
        - login
      summary: GET login
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: #/components/schemas/LoginResponseToUser
  /login/doesUserLoggedIn:
    get:
      tags:
        - login
      summary: GET login/doesUserLoggedIn
      operationId: doesUserLoggedIn
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /login/is_admin:
    get:
      tags:
        - login
      summary: "GET login/is_admin"
      operationId: "isAdminUser"
      parameters:
        - name: "user"
          in: "cookie"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "boolean"
  /download:
    get:
      tags:
        - download
      summary: GET download
      operationId: downloadBinaryFile
      parameters:
        - name: fileName
          in: query
          required: true
          schema:
            type: string
        - name: user
          in: cookie
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q:
    post:
      tags:
        - flip captcha
      summary: POST captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q
      operationId: flipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/can_skip:
    get:
      tags:
        - can skip captcha
      summary: GET captcha/is-blocked
      operationId: canSkipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/questions/choice:
    get:
      tags:
        - captcha questions
      summary: GET captcha/questions/choice
      operationId: getAllChoiceCaptchaQuestions
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/ChoiceQuestionData
  /captcha/questions/open:
    get:
      tags:
        - captcha questions
      summary: GET captcha/questions/open
      operationId: getAllOpenCaptchaQuestions
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/OpenQuestionData
  /captcha/pictures:
    get:
      tags:
        - captcha pictures
      summary: GET captcha/pictures
      operationId: getSomePictures
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
  /captcha/pictures/by_name:
    get:
      tags:
        - captcha pictures by name
      summary: GET captcha/pictures/by_name
      operationId: getPicture
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            image/*: # Media type
              schema:
                type: string
                format: binary
  /captcha/text_captchas:
    get:
      tags:
        - captcha questions
      summary: GET captcha/text_captchas
      operationId: getTextCaptcha
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  properties:
                    encryptedName:
                      type: "string"
                    solution:
                      type: string
#  /captcha/text_captchas/by_name:
#    get:
#      tags:
#        - captcha pictures by name
#      summary: GET captcha/text_captchas/by_name
#      operationId: getTextCaptchaByName
#      parameters:
#        - name: captchaName
#          in: query
#          required: false
#      responses:
#        200:
#          description: OK
#          content:
#            'application/json':
#              schema:
#                type: array
#                items:
#                  type: string
#                  format: byte
  /search:
    get:
      tags:
        - search
      summary: search api
      operationId: search
      parameters:
        - name: text
          in: query
          description: The search regex
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: #/components/schemas/SearchResponseToUser
components:
  schemas:
    LoginResponseToUser:
      tags:
        - login response to user
      type: object
      properties:
        success:
          type: boolean
        passwordDiff:
          type: array
          items: number
        cookie:
          type: string
        time:
          type: integer
          format: int64
      required:
        - passwordDiff
        - cookie
        - success
        - time

    ChoiceQuestionData:
      tags:
        - choice question data
      type: object
      properties:
        title:
          type: string
        answers:
          type: array
          items:
            type: string
        correctAnswer:
          type: integer
          format: int32
      required:
        - title
        - answers
    OpenQuestionData:
      tags:
        - open question data
      type: object
      properties:
        title:
          type: string
        answer:
          type: string
      required:
        - title
        - answer
    SearchResponseToUser:
      tags:
        - search response to user
      type: object
      properties:
        totalResults:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        isBinaryFile:
          type: boolean
      required:
        - title
        - content
