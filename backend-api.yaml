openapi: 3.0.3
info:
  title: backend API
  description: backend API
  version: 1.0.0
servers:
  - url: /api
paths:
  /login:
    get:
      tags:
        - login
      summary: GET login
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: #/components/schemas/LoginResponseToUser
  /login/doesUserLoggedIn:
    get:
      tags:
        - login
      summary: GET login/doesUserLoggedIn
      operationId: doesUserLoggedIn
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /login/is_admin:
    get:
      tags:
        - login
      summary: "GET login/is_admin"
      operationId: "isAdminUser"
      parameters:
        - name: "user"
          in: "cookie"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "boolean"

  /stage/next:
    get:
      tags:
        - stage
      summary: GET next user CTF stage
      operationId: getNextStage
      parameters:
        - name: user
          in: cookie
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CTFStage'

  /download:
    get:
      tags:
        - download
      summary: GET download
      operationId: downloadBinaryFile
      parameters:
        - name: fileName
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: user
          in: cookie
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/zip':
              schema:
                type: string
                format: binary

  /captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q:
    post:
      tags:
        - flip captcha
      summary: POST captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q
      operationId: flipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/can_skip:
    get:
      tags:
        - can skip captcha
      summary: GET captcha/is-blocked
      operationId: canSkipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/questions/choice:
    get:
      tags:
        - captcha questions
      summary: GET captcha/questions/choice
      operationId: getAllChoiceCaptchaQuestions
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/ChoiceQuestionData
  /captcha/questions/open:
    get:
      tags:
        - captcha questions
      summary: GET captcha/questions/open
      operationId: getAllOpenCaptchaQuestions
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/OpenQuestionData
  /captcha/pictures:
    get:
      tags:
        - captcha pictures
      summary: GET captcha/pictures
      operationId: getSomePictures
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
  /captcha/pictures/by_name:
    get:
      tags:
        - captcha pictures by name
      summary: GET captcha/pictures/by_name
      operationId: getPicture
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            image/*: # Media type
              schema:
                type: string
                format: binary
  /captcha/text_captchas:
    get:
      tags:
        - captcha questions
      summary: GET captcha/text_captchas
      operationId: getTextCaptcha
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  properties:
                    encryptedName:
                      type: "string"
                    solution:
                      type: string
  /captcha/text_captchas/by_name:
    get:
      tags:
        - captcha pictures by name
      summary: GET captcha/text_captchas/by_name
      operationId: getTextCaptcha
      parameters:
        - name: captchaName
          in: query
          required: false
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /search:
    get:
      tags:
        - search
      summary: search api
      operationId: search
      parameters:
        - name: text
          in: query
          description: The search regex
          required: true
          schema:
            type: string
        - name: "user"
          in: "cookie"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: #/components/schemas/SearchResponseToUser

  /password_game/solve:
    get:
      tags:
        - password game
      summary: Return rules password answers for
      operationId: solve
      parameters:
        - name: password
          required: true
          in: query
          schema:
            type: string
        - name: levels
          required: true
          in: query
          schema:
            type: integer
        - name: user
          required: true
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/PasswordGameLevel

  /password_game/does_solve_all:
    get:
      tags:
        - password game
      summary: Return whether all rules were answered
      operationId: doesSolveAll
      parameters:
        - name: password
          required: true
          in: query
          schema:
            type: string
        - name: user
          required: true
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean

  /access-denied/message:
    get:
      tags:
        - access denied
      parameters:
        - name: user
          required: true
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    LoginResponseToUser:
      type: object
      properties:
        success:
          type: boolean
        cookie:
          type: string
        loginType:
          $ref: '#/components/schemas/LoginCTFStage'
        passwordData:
          oneOf:
            - $ref: '#/components/schemas/WordleResponseData'
          discriminator:
            propertyName: loginType
            mapping:
              LOGIN_WORDLE: '#/components/schemas/WordleResponseData'
      required:
        - cookie
        - success
        - loginType
        - passwordData

    CTFStage:
      type: string
      enum:
        - LOGIN_WORDLE
        - LOGIN_SIGNAL_GRAPH
        - GOOLOOG
        - PASSWORD_GAME
        - END_OF_CTF
      description: |
        Full list of CTF stages in the game.

    LoginCTFStage:
      allOf:
        - $ref: '#/components/schemas/CTFStage'
      enum:
        - LOGIN_WORDLE
        - LOGIN_SIGNAL_GRAPH
      description: |
        Subset of CTF stages used for login-related challenges only.

    WordleResponseData:
      type: object
      required:
        - diff
        - time
      properties:
        diff:
          type: array
          items:
            $ref: '#/components/schemas/WordleCharState'
        time:
          type: integer
          format: int64
          description: Minutes until password reset

    WordleCharState:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
      description: |
        Numeric representation of character state:
        - `0`: IncorrectChar
        - `1`: CorrectCharWrongPlace
        - `2`: CorrectCharCorrectPlace

    ChoiceQuestionData:
      tags:
        - choice question data
      type: object
      properties:
        title:
          type: string
        answers:
          type: array
          items:
            type: string
        correctAnswer:
          type: integer
          format: int32
      required:
        - title
        - answers
    OpenQuestionData:
      tags:
        - open question data
      type: object
      properties:
        title:
          type: string
        answer:
          type: string
      required:
        - title
        - answer
    SearchResponseToUser:
      tags:
        - search response to user
      type: object
      properties:
        totalResults:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        isBinaryFile:
          type: boolean
      required:
        - title
        - content
    PasswordGameLevel:
      tags: password level rule
      type: object
      properties:
        description:
          type: string
        isCorrect:
          type: boolean
      required:
        - description
        - isCorrect

