openapi: 3.0.3
info:
  title: backend API
  description: backend API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /login:
    get:
      tags:
        - login
      summary: GET login
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Login response
          content:
            application/json:
              type: object
              required:
                - success
                - passwordDiff
                - cookie
                - time
              properties:
                success:
                  type: Boolean
                  description: true if the password is valid
                passwordDiff:
                  type: array
                  items: number
                  description: the diff of the given password from the actual password
                cookie:
                  type: string
                  description: the user cookie
                time:
                  type: number
                  description: the time the user have to login befor password change
  /login/doesUserLoggedIn:
    get:
      tags:
        - does user logged in
      summary: GET login/doesUserLoggedIn
      operationId: doesUserLoggedIn
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /download:
    get:
      tags:
        - download
      summary: GET download
      operationId: downloadBinaryFile
      parameters:
        - name: fileName
          in: query
          required: true
          schema:
            type: string
        - name: user
          in: cookie
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q:
    post:
      tags:
        - flip captcha
      summary: POST captcha/cG9zdCBoZXJlIHRvIGZsaXAgd2hldGhlciB0aGUgY2FwdGNoYSBzaG91bGQgcGFzcyBvciBub3Q
      operationId: flipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/is-blocked:
    get:
      tags:
        - can skip captcha
      summary: GET captcha/is-blocked
      operationId: canSkipCaptcha
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
  /captcha/questions:
    get:
      tags:
        - captcha questions
      summary: GET captcha/questions
      operationId: getAllCaptchaQuestions
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: #/components/schemas/QuestionData
  /captcha/pictures:
    get:
      tags:
        - captcha pictures
      summary: GET captcha/pictures
      operationId: getSomePictures
      parameters:
        - name: amount
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
  /captcha/pictures/by_name:
    get:
      tags:
        - captcha pictures by name
      summary: GET captcha/pictures/by_name
      operationId: getPicture
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /search:
    get:
      tags:
        - search
      summary: GET search
      operationId: search
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: #/components/schemas/SearchResponseToUser
components:
  schemas:
    LoginResponseToUser:
      tags:
        - login response to user
      type: object
      properties:
        success:
          type: boolean
        passwordDiff:
          type: integer
          format: int32
        cookie:
          type: string
        time:
          type: integer
          format: int64
      required:
        - passwordDiff
        - cookie
    QuestionData:
      tags:
        - question data
      type: object
      properties:
        title:
          type: string
        answers:
          type: array
          items:
            type: string
        correctAnswer:
          type: integer
          format: int32
      required:
        - title
        - answers
    SearchResponseToUser:
      tags:
        - search response to user
      type: object
      properties:
        totalResults:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content
